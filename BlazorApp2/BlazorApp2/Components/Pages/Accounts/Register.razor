@page "/account/register"
@using BlazorApp2.Components.Shared.Data
@using BlazorApp2.Contracts
@using BlazorApp2.Services
@using Jobs.Entities.DataModel
@inject NavigationManager NavigationManager
@inject IAccountService AccountService

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body" style="width: 400px">
        <EditForm Model="UserModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="UserModel.Email" class="form-control" style="width: 380px"/>
                <ValidationMessage For="@(() => UserModel.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="UserModel.Password" type="password" class="form-control" style="width: 380px"/>
                <ValidationMessage For="@(() => UserModel.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary" style="margin-top: 10px;width: 100px">
                @if (loading)
                {
                <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            <NavLink href="/Login" class="btn btn-link" style="margin-top: 10px">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    UserData? UserModel { get; set; }
    private bool loading;
    
    protected override void OnInitialized()
    {
        UserModel ??= new UserData { Email = string.Empty, Password = string.Empty};
    }

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            var result = await AccountService.RegisterAsync(UserModel?.Email, UserModel?.Password, string.Empty, string.Empty);
            Console.WriteLine($"Register OnValidSubmit - {result}");
            if (result.Result)
            {
                NavigationManager.NavigateTo("/account/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

}